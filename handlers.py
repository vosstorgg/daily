from telegram import Update
from telegram.ext import (
    CommandHandler, MessageHandler, filters, ContextTypes,
    ConversationHandler
)
from db import save_user
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
ASK_NAME, ASK_DATE, ASK_TIME, ASK_PLACE = range(4)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

# –®–∞–≥ 1 ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text.strip()
    await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä 25-06-1994):")
    return ASK_DATE

# –®–∞–≥ 2 ‚Äî –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        birth_date = datetime.strptime(text, "%d-%m-%Y").date()
        context.user_data['birth_date'] = birth_date
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25-06-1994")
        return ASK_DATE

    await update.message.reply_text("–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é, —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –∏–ª–∏ ¬´–Ω–µ—Ç¬ª):")
    return ASK_TIME

# –®–∞–≥ 3 ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Å—Ç–æ
async def ask_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_text = update.message.text.strip()
    if time_text.lower() == '–Ω–µ—Ç':
        context.user_data['birth_time'] = None
    else:
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–æ –≤—Ä–µ–º—è
            birth_time = datetime.strptime(time_text, "%H:%M").time()
            context.user_data['birth_time'] = birth_time
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30 –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.")
            return ASK_TIME

    await update.message.reply_text("–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é, –∏–ª–∏ ¬´–Ω–µ—Ç¬ª):")
    return ASK_PLACE

# –®–∞–≥ 4 ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def finish_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    place = update.message.text.strip()
    context.user_data['birth_place'] = place if place.lower() != '–Ω–µ—Ç' else None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await save_user(
        telegram_id=update.effective_user.id,
        name=context.user_data['name'],
        birth_date=context.user_data['birth_date'],
        birth_time=context.user_data['birth_time'],
        birth_place=context.user_data['birth_place']
    )

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üåü")
    return ConversationHandler.END

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —à–∞–≥–∏ –≤ Telegram
def register_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date)],
            ASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_place)],
            ASK_PLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_registration)],
        },
        fallbacks=[],
    )
    app.add_handler(conv)

    )
    app.add_handler(conv)
